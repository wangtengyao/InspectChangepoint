cat("y = ", y, "z = ", z, "u = ", u, "err = ", vector.norm(y-z))
n = 100
x = runif(n)
n = 100
x = runif(n)
y = diff(sort(x,increasing = TRUE))
y = diff(sort(x,decreasing = FALSE))
y
min(y)
n = 1000
x = runif(n)
y = diff(sort(x,decreasing = FALSE))
min(y)
n = 10000
x = runif(n)
y = diff(sort(x,decreasing = FALSE))
min(y)
n = 100000
x = runif(n)
y = diff(sort(x,decreasing = FALSE))
min(y)
n = 100000
x = runif(n)
y = diff(sort(x,decreasing = FALSE))
min(y)
runif(100)
n = 100000
x = runif(n)
x
y = diff(sort(x,decreasing = FALSE))
y
min(y)
plot(y)
log(y)
min(log(y))
options(digits=20)
n = 100000
x = runif(n)
y = diff(sort(x,decreasing = FALSE))
min(y)
x[1]
x[2]
sort(x)
y = sort(x)
diff(y)
log(diff(y))
match(log(diff(y)),-Inf)
match(-Inf,log(diff(y)))
x[88174]
x[88175]
x[88173]
y[88174]
y[88173]
y[88175]
setwd('~/Dropbox/Tengyao-Richard/simulation/SP500/')
N=128
k=7
i
I
2+i
2+I
?complex
1i
pii
pi*1i
exp(-2*pi*1i*k*1/N)
exp(-2*pi*1i*k*1/N)+exp(-2*pi*1i*k*(N-1)/N)
?fft
x = rnorm(N)
fft(x)
setwd('~/Dropbox/Tengyao-Richard/simulation/SP500/')
dat <- read.csv('eegdata.csv', header = F)
dim(dat)
sampling.rate = 128
dat = as.matrix(dat, dimnames = NULL)
30504/128
nWindows = floor(dim(dat)[2]/(sampling.rate*2))
window.width = sampling.rate*2
i=1
j=1
x = dat[j, ((i-1)*window.width+1):(i*window.width)]
x
dat = as.numeric(as.matrix(dat, dimnames = NULL))
window.width = sampling.rate*2
nWindows = floor(dim(dat)[2]/window.width)
x = dat[j, ((i-1)*window.width+1):(i*window.width)]
?as.matrix
dat = as.matrix(dat, dimnames = NULL)
window.width = sampling.rate*2
x = dat[j, ((i-1)*window.width+1):(i*window.width)]
i
j
((i-1)*window.width+1):(i*window.width)
dim(dat)
dat <- read.csv('eegdata.csv', header = F)
dat = as.matrix(dat)
dat[1:5,1:5]
colnames(dat)<-NULL
dat[1:5,1:5]
window.width = sampling.rate*2
nWindows = floor(dim(dat)[2]/window.width)
x = dat[j, ((i-1)*window.width+1):(i*window.width)]
x
z = fft(x)
z
plot(x)
i=10,j=8
i=10;j=8
x = dat[j, ((i-1)*window.width+1):(i*window.width)]
z = fft(x)
plot(x)
z
install.packages('ACGH')
library(ACGH)
install.packages('ecp')
library(ecp)
data('ACGH', package='ecp')
acghData <- ACGH$data
ACGH$individual
dim(acghData)
acghData <- t(ACGH$data)
dim(acghData)
plot(acghData[1,])
plot(acghData[2,])
plot(acghData[3,])
plot(acghData[4,])
plot(acghData[5,])
plot(acghData[6,])
plot(acghData[7,])
max(acghData)
log(2)
plot(acghData[1,], pch='.')
plot(acghData[2,], pch='.')
plot(acghData[3,], pch='.')
plot(acghData[4,], pch='.')
plot(acghData[5,], pch='.')
plot(acghData[6,], pch='.')
plot(acghData[7,], pch='.')
plot(acghData[10,], pch='.')
plot(acghData[11,], pch='.')
plot(acghData[12,], pch='.')
dat <- t(ACGH$data)
dim(dat)
dat <- dat[,1:2000]
plot(dat[1,], pch='.')
plot(dat[2,], pch='.')
plot(dat[3,], pch='.')
plot(dat[4,], pch='.')
plot(dat[5,], pch='.')
plot(dat[6,], pch='.')
plot(dat[7,], pch='.')
plot(dat[8,], pch='.')
plot(dat[9,], pch='.')
plot(dat[10,], pch='.')
plot(dat[11,], pch='.')
dat <- dat[,1:1900]
plot(dat[11,], pch='.')
dat <- dat[,1:1950]
dat <- t(ACGH$data)
dat <- dat[,1:1950]
plot(dat[11,], pch='.')
max(abs(dat))
library(InspectChangepoint)
inspect(dat)
?inspect
inspect(dat, threshold = 10)
inspect(dat, threshold = 20)
inspect(dat, threshold = 30)
inspect(dat, threshold = 40)
inspect(dat, threshold = 50)
inspect(dat, threshold = 60)
inspect(dat, threshold = 70)
inspect(dat, threshold = 100)
visualise(dat)
library(putils)
visualise(dat)
inspect(dat, threshold = 20)
obj <- inspect(dat, threshold = 20)
dim(dat)
?as.vector
ys = as.vector(t(dat)) + rep(1:43, each = 1950)
plot(xs,ys,pch='.')
xs = rep(1:1950, 43)
ys = as.vector(t(dat)) + rep(1:43, each = 1950)
plot(xs,ys,pch='.')
ys = as.vector(t(dat))*0.8 + rep(1:43, each = 1950)
plot(xs,ys,pch='.')
ys = as.vector(t(dat))*0.8 + rep(1:43, each = 1950)
plot(xs,ys,pch='.')
names(obj)
cp <- obj$changepoints
names(cp)
cp
cp <- obj$changepoints
obj <- obj$changepoints
cp <- obj[,1]
lvl <- obj[,3]
?abline
cp.select = cp[lvl<2]
print(cp.select <- cp[lvl<2])
print(cp.select <- cp[lvl<=3])
abline(v = cp.select, col='red', lty=2)
print(cp.select <- cp[lvl<=5])
abline(v = cp.select, col='red', lty=2)
print(cp.select <- cp[lvl<=6])
abline(v = cp.select, col='red', lty=2)
sig <- obj[,2]
print(cp.select <- cp[sig>30])
abline(v = cp.select, col='red', lty=2)
plot(xs,ys,pch='.')
abline(v = cp.select, col='red', lty=2)
?inspect
obj<- inspect(dat, M = 100)
mx <- obj$changepoints
cp <- mx[,1]
lvl <- mx[,3]
sig <- mx[,2]
plot(xs,ys,pch='.')
print(cp.select <- cp[sig>30])
print(cp.select <- cp[sig>50])
abline(v = cp.select, col='red', lty=2)
source('../xi.r')
setwd('..')
source('xi.r')
xiMC(1950,43)
xiMC(1950,43,us)
source('us.r')
xiMC(1950,43,us)
?inspect
obj <- inspect(dat, threshold = 7)
obj
obj <- inspect(dat, threshold = 50)
quantile(ys,0.05)
quantile(ys,c(0.05,0.95))
quantile(dat,c(0.05,0.95))
diff(quantile(dat,c(0.05,0.95)))
diff(quantile(dat,c(0.01,0.99)))
0.9/diff(quantile(dat,c(0.01,0.99)))
multiplot = function(m){
xs = rep(1:dim(m)[2], dim(m)[1])
ys = as.vector(t(m))
scale = 0.9/diff(quantile(ys, c(0.01,0.99)))
ys = ys*scale + rep(1:dim(m)[1], each = dim(m)[2])
plot(xs,ys,pch='.')
}
multiplot(dat)
abline(v = cp.select, col='red', lty=2)
multiplot(dat[1:20,1200:1600])
abline(v = cp.select, col='red', lty=2)
multiplot(dat[,1200:1600])
abline(v = cp.select, col='red', lty=2)
multiplot(dat[,1200:1600])
abline(v = cp.select -1200, col='red', lty=2)
plot(dat[1,])
plot(dat[10,])
abline(v = cp.select, col='red', lty=2)
multiplot(dat[,1200:1600], ylim=c(-2,2), pch=4)
plot(dat[10,], ylim=c(-2,2), pch=2)
plot(dat[10,], ylim=c(-2,2), pch=3)
plot(dat[10,], ylim=c(-2,2), pch=4)
plot(dat[10,], ylim=c(-2,2), pch=5)
plot(dat[10,], ylim=c(-2,2), pch=6)
plot(dat[10,], ylim=c(-2,2), pch=7)
plot(dat[10,], ylim=c(-2,2), pch=8)
plot(dat[10,], ylim=c(-2,2), pch=9)
plot(dat[10,], ylim=c(-2,2), pch='.')
plot(dat[10,], ylim=c(-2,2), pch='*')
plot(dat[10,], ylim=c(-2,2), pch='.')
abline(v = cp.select, col='red', lty=2)
?pch
plot(dat[10,], ylim=c(-2,2), pch=20)
abline(v = cp.select, col='red', lty=2)
multiplot(m[c(5,10,15,20,25)], pch=20)
multiplot = function(m, pch){
xs = rep(1:dim(m)[2], dim(m)[1])
ys = as.vector(t(m))
scale = 0.9/diff(quantile(ys, c(0.01,0.99)))
ys = ys*scale + rep(1:dim(m)[1], each = dim(m)[2])
plot(xs,ys,pch=pch)
}
multiplot(m[c(5,10,15,20,25)], pch=20)
multiplot(dat[c(5,10,15,20,25)], pch=20)
multiplot(dat[c(5,10,15,20,25),], pch=20)
abline(v = cp.select, col='red', lty=2)
multiplot(dat[c(5,10,15,20,25,30,40),], pch=20)
inspect(dat[c(5,10,15,20,25,30,40),])
cps = inspect(dat[c(5,10,15,20,25,30,40),])
abline(v = cps, col='red', lty=2)
abline(v = print(cps), col='red', lty=2)
cps = inspect(dat[c(5,10,15,20,25,30,40),], threshold = 10)
abline(v = print(cps), col='red', lty=2)
multiplot(dat[c(5,10,15,20,25,30,40),], pch=20)
abline(v = print(cps), col='red', lty=2)
cps = inspect(dat[c(5,10,15,20,25,30,40),], threshold = 100)
abline(v = print(cps), col='red', lty=2)
cps = inspect(dat[c(5,10,15,20,25,30,40),], threshold = 30)
abline(v = print(cps), col='red', lty=2)
multiplot(dat[c(5,10,15,20,25,30,40),], pch=20)
cps = inspect(dat[c(5,10,15,20,25,30,40),], threshold = 30)
abline(v = print(cps), col='red', lty=2)
cps = inspect(dat[c(5,10,15,20,25,30,40),], threshold = 20)
abline(v = print(cps), col='red', lty=2)
multiplot(dat, pch=20)
multiplot(dat, pch='.')
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
cite('ecp')
data('ACGH', package='ecp')
dat <- t(ACGH$data)
dim(dat)
obj <- inspect(dat, threshold = 50)
mx <- obj$changepoints
multiplot = function(m, pch){
xs = rep(1:dim(m)[2], dim(m)[1])
ys = as.vector(t(m))
scale = 0.9/diff(quantile(ys, c(0.01,0.99)))
ys = ys*scale + rep(1:dim(m)[1], each = dim(m)[2])
plot(xs,ys,pch=pch)
}
print(cp.select <- cp[sig>50])
abline(v = cp.select, col='red', lty=2)
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
mx <- obj$changepoints
cp <- mx[,1]
lvl <- mx[,3]
sig <- mx[,2]
print(cp.select <- cp[sig>50])
abline(v = cp.select, col='red', lty=2)
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
print(cp.select <- cp[sig>60])
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
dim(dat)
print(cp.select <- cp[sig>61])
print(cp.select <- cp[sig>61.1])
print(cp.select <- cp[sig>61.2])
print(cp.select <- cp[sig>61.3])
print(cp.select <- cp[sig>61.4])
print(cp.select <- cp[sig>61.5])
print(cp.select <- cp[sig>60])
print(cp.select <- cp[sig>62])
print(cp.select <- cp[sig>63])
print(cp.select <- cp[sig>64])
print(cp.select <- cp[sig>65])
print(cp.select <- cp[sig>66])
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
print(cp.select <- cp[sig>59])
print(cp.select <- cp[sig>59])
print(cp.select <- cp[sig>59])
print(cp.select <- cp[sig>59])
print(cp.select <- cp[sig>59.1])
print(cp.select <- cp[sig>59.2])
print(cp.select <- cp[sig>59.3])
print(cp.select <- cp[sig>59.4])
print(cp.select <- cp[sig>59.5])
print(cp.select <- cp[sig>59.6])
print(cp.select <- cp[sig>59.7])
print(cp.select <- cp[sig>59.8])
print(cp.select <- cp[sig>59.9])
print(cp.select <- cp[sig>60])
print(cp.select <- cp[sig>60.1])
print(cp.select <- cp[sig>60.2])
print(cp.select <- cp[sig>60.3])
print(cp.select <- cp[sig>60.4])
print(cp.select <- cp[sig>60.5])
obj <- inspect(dat, threshold = 50, M = 1000)
mx <- obj$changepoints
cp <- mx[,1]
lvl <- mx[,3]
sig <- mx[,2]
print(cp.select <- cp[sig>60])
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
print(cp.select <- cp[sig>61])
print(cp.select <- cp[sig>61.1])
print(cp.select <- cp[sig>61.2])
print(cp.select <- cp[sig>61.3])
print(cp.select <- cp[sig>62])
print(cp.select <- cp[sig>62.1])
print(cp.select <- cp[sig>62.2])
print(cp.select <- cp[sig>62.3])
print(cp.select <- cp[sig>62.4])
inspect <-
function(x, lambda, threshold, schatten = c(1,2), M){
# inspect is an algorithm for multiple changepoint identification in the
# mean structure of a high-dimensional time series
# basic parameters and initialise
x <- as.matrix(x)
if (dim(x)[2] == 1) x <- t(x) # treat univariate time series as a row vector
p <- dim(x)[1] # dimensionality of the time series
n <- dim(x)[2] # time length of the observation
if (missing(lambda)) lambda <- sqrt(log(log(n)*p)/2)
if (missing(threshold)) threshold <- compute.threshold(n, p)
if (missing(schatten)) schatten <- 2
if (missing(M)) M <- 0
x <- rescale.variance(x)
# generate random time windows of length at least 2
rnd1 <- sample(0:(n-2), M, replace = TRUE)
rnd2 <- sample(0:(n-2), M, replace = TRUE)
window_s <- pmin(rnd1, rnd2)
window_e <- pmax(rnd1, rnd2) + 2
# recursive function for binary segmentation
BinSeg <- function(x, s, e, depth, parent.val){
if (e - s <= 2) return(NULL) # stop when the segment has only one point
ind <- (window_s >= s) & (window_e <= e) # \mathcal{M}_{s,e}
max.val <- -1
cp <- 0
for (m in c(0,((1:M)[ind]))) {
if (m == 0) {
s_m <- s
e_m <- e
} else {
s_m <- window_s[m]
e_m <- window_e[m]
}
obj <- locate.change(x[,(s_m+1):e_m])
if (obj$cusum > max.val) {
max.val <- obj$cusum
cp <- s_m + obj$changepoint
}
}
# recurse
ret <- NULL
ret$location <- cp
ret$max.proj.cusum <- max.val #min(parent.val, max.val)
ret$depth <- depth
if (ret$max.proj.cusum < threshold) {
return(NULL)
} else {
return(cbind(BinSeg(x, s, cp, depth+1, ret$max.proj.cusum),
ret,
BinSeg(x, cp, e, depth+1, ret$max.proj.cusum)))
}
}
# return all changepoints of x
ret <- NULL
ret$x <- x
ret$changepoints <- BinSeg(x, 0, n, depth = 1, parent.val = .Machine$double.xmax)
ret$changepoints <- t(matrix(as.numeric(ret$changepoints), nrow = 3))
colnames(ret$changepoints) = c('location', 'max.proj.cusum', 'depth')
class(ret) <- 'inspect'
return(ret)
}
setwd('../package/InspectChangepoint/')
source('*')
setwd('R')
source('locate.change.R')
source('vector.norm.R')
source('vector.soft.thresh.R')
source('summary.inspect.R')
source('sparse.svd.R')
source('single.change.R')
source('rescale.variance.R')
source('print.inspect.R')
source('plot.hdchangeseq.R')
source('plot.inspect.R')
source('PiS.R')
source('PiW.R')
source('multi.change.R')
source('locate.change.R')
source('cusum.transform.R')
source('compute.threshold.R')
detach("package:InspectChangepoint", unload=TRUE)
inspect
obj <- inspect(dat, threshold = 50, M = 1000)
mx <- obj$changepoints
visualise(dat)
lvl <- mx[,3]
sig <- mx[,2]
print(cp.select <- cp[sig>62.4])
print(cp.select <- cp[sig>64.4])
print(cp.select <- cp[sig>65.4])
print(cp.select <- cp[sig>66.4])
print(cp.select <- cp[sig>69])
print(cp.select <- cp[sig>70])
print(cp.select <- cp[sig>71])
print(cp.select <- cp[sig>72])
print(cp.select <- cp[sig>73])
print(cp.select <- cp[sig>74])
print(cp.select <- cp[sig>75])
print(cp.select <- cp[sig>76])
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
obj <- inspect(dat, threshold = 50)
mx <- obj$changepoints
visualise(dat)
cp <- mx[,1]
lvl <- mx[,3]
sig <- mx[,2]
print(cp.select <- cp[sig>76])
print(cp.select <- cp[sig>70])
print(cp.select <- cp[sig>69])
print(cp.select <- cp[sig>68])
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='blue', lty=2)
visualise(dat)
abline(v = cp.select, col='blue', lty=2)
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='blue', lty=2)
abline(v = cp.select, col='red', lty=2)
multiplot(dat[1:10,], pch='.')
abline(v = cp.select, col='red', lty=2)
length(cp)
obj <- inspect(dat, threshold = 10)
dim(obj$changepoints)
obj <- inspect(dat, threshold = 15)
dim(obj$changepoints)
